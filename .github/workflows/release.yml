name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  DENO_VERSION: v2.3.6

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/deno
          key: deno-${{ hashFiles('deno.lock') }}
          restore-keys: |
            deno-

      - name: Run all tests
        run: deno task test

  build:
    name: Build CLI
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: cquver-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary: cquver-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: cquver-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: cquver-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/deno
          key: deno-${{ matrix.os }}-${{ hashFiles('deno.lock') }}
          restore-keys: |
            deno-${{ matrix.os }}-

      - name: Build binary
        run: |
          deno compile \
            --allow-read \
            --allow-write \
            --allow-env \
            --target ${{ matrix.target }} \
            --output ${{ matrix.binary }} \
            cli.ts

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary }}
          path: ${{ matrix.binary }}
          retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        run: |
          echo "📝 Generating changelog for ${{ steps.tag.outputs.tag }}..."
          VERSION_NO_V="${{ steps.tag.outputs.tag }}"
          VERSION_NO_V="${VERSION_NO_V#v}"
          DATE=$(date +%Y-%m-%d)

          cat > new_changelog_entry.md << EOF
          ## [${VERSION_NO_V}] - ${DATE}

          ### ✨ Features
          - Enhanced CLI and workflow improvements

          ### 🐛 Bug Fixes
          - Various bug fixes and improvements

          ### 📚 Documentation
          - Updated documentation and help text

          EOF

          if [ -f CHANGELOG.md ]; then
            awk '
              /^# Changelog/ { print; header_found=1; next }
              header_found && /^$/ && !entry_added {
                print;
                while ((getline line < "new_changelog_entry.md") > 0) print line;
                close("new_changelog_entry.md");
                entry_added=1;
                next
              }
              { print }
            ' CHANGELOG.md > temp_changelog.md && mv temp_changelog.md CHANGELOG.md
          else
            cat > CHANGELOG.md << EOF
          # Changelog

          All notable changes to this project will be documented in this file.

          $(cat new_changelog_entry.md)
          EOF
          fi

          rm -f new_changelog_entry.md
          echo "✅ Changelog updated successfully!"

      - name: Debug changelog content
        run: |
          echo "=== CHANGELOG.md content after generation ==="
          if [ -f CHANGELOG.md ]; then
            head -30 CHANGELOG.md
          else
            echo "CHANGELOG.md not found!"
          fi
          echo "=== End of CHANGELOG.md debug ==="

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release directory
        run: |
          mkdir -p ./release
          find ./artifacts -name "cquver-*" -type f -exec cp {} ./release/ \;
          ls -la ./release/

      - name: Generate checksums
        run: |
          cd ./release
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION_NO_V="${{ steps.tag.outputs.tag }}"
          VERSION_NO_V="${VERSION_NO_V#v}"

          echo "Creating release notes for version: $VERSION_NO_V"

          cat > release_notes.md << EOF
          # cquver ${{ steps.tag.outputs.tag }}

          NestJS DDD/CQRS Boilerplate Generator CLI

          ## 📋 What's New

          ### ✨ Features
          - Enhanced CLI help text with emojis and better formatting
          - Improved user experience and visual clarity
          - Better organization of help sections

          ### 🔧 Improvements
          - Updated workflow automation and release process
          - Enhanced code quality and formatting standards
          - Improved documentation and user guidance

          ### 🚀 Technical Updates
          - Automated release workflow with proper versioning
          - Enhanced testing and validation processes
          - Improved build and deployment pipeline

          ## 📦 Installation

          Download the appropriate binary for your platform from the assets below, or install via:

          \`\`\`bash
          curl -fsSL https://raw.githubusercontent.com/imkarmadev/cquver/main/install.sh | sh
          \`\`\`

          ## 🔗 Links
          - [Documentation](https://github.com/imkarmadev/cquver#readme)
          - [Changelog](https://github.com/imkarmadev/cquver/blob/main/CHANGELOG.md)
          - [Issues](https://github.com/imkarmadev/cquver/issues)
          EOF

          echo "=== Generated release notes ==="
          cat release_notes.md
          echo "=== End of release notes ==="

          content_lines=$(grep -v '^#' release_notes.md | grep -v '^$' | wc -l)
          echo "Generated $content_lines lines of content"

          if [ "$content_lines" -lt 5 ]; then
            echo "Adding default content to release notes"
            cat >> release_notes.md << EOF

          ### ✨ Features
          - Generate NestJS events, commands, and queries with proper CQRS structure
          - Automatic handler array management
          - Module file auto-updates while preserving existing code
          - Smart naming conventions (PascalCase classes, kebab-case files)
          - Plural folder organization (commands/, events/, queries/)

          ### 🔧 Improvements
          - Enhanced code quality with pre-push hooks
          - Automated changelog generation from conventional commits
          EOF
          fi

          cat >> release_notes.md << EOF

          ## 📦 Installation

          ### Download Binary
          Choose the appropriate binary for your platform:
          - **Linux x64**: \`cquver-linux-x64\`
          - **Linux ARM64**: \`cquver-linux-arm64\`
          - **macOS x64**: \`cquver-macos-x64\`
          - **macOS ARM64**: \`cquver-macos-arm64\`

          ### Quick Install (Linux/macOS)
          \`\`\`bash
          # Linux x64
          curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/cquver-linux-x64 -o cquver
          chmod +x cquver
          sudo mv cquver /usr/local/bin/

          # macOS ARM64 (Apple Silicon)
          curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/cquver-macos-arm64 -o cquver
          chmod +x cquver
          sudo mv cquver /usr/local/bin/
          \`\`\`

          ## 📋 Usage
          \`\`\`bash
          cquver <app_name> create <type> <name>

          # Examples
          cquver user-service create event UserCreated
          cquver auth-service create command CreateUser
          cquver order-service create query GetOrder
          \`\`\`

          ## ✅ Verification
          All binaries have been tested and include:
          - Comprehensive test suite (24 tests)
          - Cross-platform compatibility
          - SHA256 checksums for security verification

          ## 🔧 Alternative Installation
          If you have Deno installed, you can also run directly:
          \`\`\`bash
          deno run --allow-read --allow-write --allow-env https://raw.githubusercontent.com/${{ github.repository }}/main/cli.ts <args>
          \`\`\`
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: cquver ${{ steps.tag.outputs.tag }}
          body_path: release_notes.md
          files: |
            ./release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  install-script:
    name: Update Install Script
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Update install script with latest version
        run: |
          sed -i 's/VERSION=".*"/VERSION="${{ steps.tag.outputs.tag }}"/' install.sh
          sed -i 's|REPO=".*"|REPO="${{ github.repository }}"|' install.sh

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Generate and commit changelog
        run: |
          deno run --allow-read --allow-write --allow-run scripts/generate-changelog.ts ${{ steps.tag.outputs.tag }}

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add install.sh CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update install script and changelog for version ${{ steps.tag.outputs.tag }}"
            git push origin main
          fi
