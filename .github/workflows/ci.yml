name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DENO_VERSION: v2.3.x

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Check formatting
        run: deno fmt --check

      - name: Lint code
        run: deno lint

      - name: Type check
        run: deno check cli.ts

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/deno
          key: deno-${{ matrix.os }}-${{ hashFiles('deno.lock') }}
          restore-keys: |
            deno-${{ matrix.os }}-

      - name: Run unit tests
        run: deno task test:unit

      - name: Run integration tests
        run: deno task test:integration

      - name: Run end-to-end tests
        run: deno task test:e2e

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Build CLI
        run: deno task build

      - name: Test built binary
        run: |
          chmod +x cquver
          ./cquver --help
